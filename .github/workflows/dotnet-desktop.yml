name: Build & Release RMQ-Client

on:
  push:
    tags:
      - 'v*' # z.B. v1.0.0
  workflow_dispatch:
    inputs:
      tags:
        description: 'Tag für Release (z. B. v1.2.3)'
        required: true
  
jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # wichtig, um alle Tags abrufen zu können

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # oder 7.0.x / 6.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --no-build --verbosity normal

      - name: Publish App
        run: |
          dotnet publish -c Release -o publish_output

      - name: Zip Output
        run: Compress-Archive -Path publish_output/* -DestinationPath MyApp.zip
      
      - name: Check if tag exists
        shell: bash
        id: check_tag
        run: |
          if git rev-parse "refs/tags/${{ github.event.inputs.tag }}" >/dev/null 2>&1; then
            echo "Tag exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag does not exist"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Tag (if missing)
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}

      - name: Wait briefly to ensure GitHub sees the tag
        if: env.tag_created == 'true'
        run: sleep 5
        
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: Release ${{ github.event.inputs.tag }}
          files: MyApp.zip
          target_commitish: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
